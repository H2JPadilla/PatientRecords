@model EL.PatientEntity
@{
    ViewBag.Title = "Add Patient";
}
@if (TempData["Message"] != null)
{
    <div class="alert alert-danger" id="server-message">
        @TempData["Message"]
    </div>
}
<h2 class="mt-3">New Record</h2>
@using (Html.BeginForm("AddPatient", "Patient", FormMethod.Post, new { id = "mainForm" }))
{
    @Html.AntiForgeryToken()

    <div id="validation-summary" class="alert d-none"></div>

    <div>

        <div class="mb-3 col-4">
            <label for="Dosage" class="form-label">Dosage<span style="color:red;">*</span></label>
            @Html.TextBoxFor(m => m.Dosage, new { @class = "form-control", type = "number", step = "any", id = "Dosage", title = "Enter the dosage intake", tabindex = "1" })
        </div>

        <div class="mb-3 col-4">
            <label for="DrugName" class="form-label">Drug<span style="color:red;">*</span></label>
            @Html.TextBoxFor(m => m.DrugName, new { @class = "form-control", id = "DrugName", title = "Enter the name of the drug/medicine", tabindex = "2" })
        </div>


        <div class="mb-3 col-4">
            <label for="Patient" class="form-label">Patient<span style="color:red;">*</span></label>
            @Html.TextBoxFor(m => m.Patient, new { @class = "form-control", id = "Patient", title = "Enter the name of the patient", tabindex = "3" })
        </div>

    </div>

    <div class="col-12 mt-3">

        <button type="button" id="saveButton" class="btn btn-outline-secondary" tabindex="4">Save</button>
        <button type="button" class="btn btn-outline-secondary" id="clearButton" tabindex="5">Clear All</button>
        <a href="@Url.Action("ViewPatient")" class="btn btn-outline-secondary" tabindex="6">Cancel</a>
    </div>
}

<div class="modal fade" id="saveModal" tabindex="-1" aria-labelledby="saveModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="saveModalLabel">Confirm Save</h5>

                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">Do you want to save this patient record?</div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmSaveBtn">Yes, Save</button>

            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script src="~/Areas/Admin/Content/JavaScript/jquery-3.6.0.min.js"></script>
    <script>
    document.addEventListener('DOMContentLoaded', function () {
        document.getElementById('Dosage').focus();
        var saveModal = new bootstrap.Modal(document.getElementById('saveModal'));

        // FIX 1: Clear starting '0' value on load
        const dosageInput = document.getElementById('Dosage');
        if (dosageInput.value === '0' || dosageInput.value === '0.0000' || dosageInput.value === '0.00') {
            dosageInput.value = '';
        }

        // Fade out success or error messages after a few seconds
        const serverMessage = document.getElementById('server-message');
        if (serverMessage) {
            setTimeout(() => {
                serverMessage.style.transition = 'opacity 0.5s ease-out';
                serverMessage.style.opacity = '0';
                setTimeout(() => serverMessage.remove(), 500);
            }, 5000); // 5 seconds
        }

        document.querySelectorAll('input').forEach(input => {
            input.addEventListener('input', function() {
                this.classList.remove('is-invalid');
                document.getElementById('validation-summary').classList.add('d-none');
            });
        });

        document.getElementById('Dosage').addEventListener('input', function() {
            let value = this.value;
            if (value.startsWith('0') && value.length > 1 && value.charAt(1) !== '.') {
                this.value = parseFloat(value);
            }
        });

        function clearErrors() {
            document.querySelectorAll('input').forEach(input => {
                input.classList.remove('is-invalid');
            });
            const validationSummary = document.getElementById('validation-summary');
            validationSummary.innerHTML = '';
            validationSummary.classList.add('d-none');
            validationSummary.classList.remove('alert-danger');
            validationSummary.classList.remove('fade-out');
        }

        function displayError(message) {
            const validationSummary = document.getElementById('validation-summary');
            validationSummary.innerHTML = message;
            validationSummary.classList.remove('d-none');
            validationSummary.classList.add('alert-danger');

            // Set timeout for fade-out
            setTimeout(() => {
                validationSummary.style.transition = 'opacity 0.5s ease-out';
                validationSummary.style.opacity = '0';
                setTimeout(() => {
                    validationSummary.classList.add('d-none');
                    validationSummary.style.opacity = '1';
                }, 500); // Wait for the transition to finish before hiding
            }, 5000); // Display for 5 seconds
        }

        function validateForm() {
            let firstErrorMessage = "";
            let fieldToHighlight = null;

            const patient = document.getElementById('Patient');
            const drugName = document.getElementById('DrugName');
            const dosage = document.getElementById('Dosage');

            const patientValue = patient.value.trim();
            const drugNameValue = drugName.value.trim();
            const dosageValue = dosage.value.trim();
            const parsedDosage = parseFloat(dosageValue);

            clearErrors(); // Clear all previous highlights and summary message

            // Re-assign trimmed values to fields, in case validation passes
            patient.value = patientValue;
            drugName.value = drugNameValue;

            // ------------------------------------------------------------------
            // A. DOSAGE VALIDATION (Priority 1: Specific Errors)
            // ------------------------------------------------------------------
            if (dosageValue !== "") {
                let dosageError = "";

                if (isNaN(parsedDosage) || parsedDosage <= 0) {
                    // Rule: Dosage, if it is equal to zero or negative, then highlight only to dosage.
                    dosageError = "Dosage must be a positive number.";
                } else if (parsedDosage > 999.9999) {
                    dosageError = "Dosage cannot exceed 999.9999.";
                } else {
                    const decimalPlaces = (dosageValue.split('.')[1] || '').length;
                    if (decimalPlaces > 4) {
                        // Rule: Dosage, if it consist more than 4 decimal places, highlight the dosage and display the message.
                        dosageError = "Dosage can only have up to 4 decimal places.";
                    }
                }

                if (dosageError !== "") {
                    firstErrorMessage = dosageError;
                    fieldToHighlight = dosage;

                    fieldToHighlight.classList.add('is-invalid');
                    displayError(firstErrorMessage);
                    fieldToHighlight.focus();
                    return false;
                }
            }


            // ------------------------------------------------------------------
            // B. PATIENT VALIDATION (Priority 2: Format/Length Errors)
            // ------------------------------------------------------------------
            if (patientValue !== "") {
                // Patient name validation: Must contain only alpha, space, hyphen, apostrophe
                const isAlphaAndAllowedChars = /^[a-zA-Z\s'-]+$/.test(patientValue);

                // Rule: Patient, if it has characters aside from alpha character with space and special characters (hypen and apostrophe only)
                if (!isAlphaAndAllowedChars) {
                    firstErrorMessage = "Patient name must contain only alpha characters, spaces, hyphens (-), and apostrophes (').";
                    fieldToHighlight = patient;
                } else if (patientValue.length > 50) {
                    // Rule: last field format validation is if it exceeds 50 character
                    firstErrorMessage = "Patient name cannot exceed 50 characters.";
                    fieldToHighlight = patient;
                }

                if (fieldToHighlight === patient) {
                    fieldToHighlight.classList.add('is-invalid');
                    displayError(firstErrorMessage);
                    fieldToHighlight.focus();
                    return false;
                }
            }


            // ------------------------------------------------------------------
            // C. DRUG VALIDATION (Priority 3: Format/Length Errors)
            // ------------------------------------------------------------------
            if (drugNameValue !== "") {
                // Rule: Drug, If it has characters aside from alphanumeric
                if (!/^[a-zA-Z0-9\s]+$/.test(drugNameValue)) {
                    firstErrorMessage = "Drug name must contain only alphanumeric characters and spaces.";
                    fieldToHighlight = drugName;
                } else if (drugNameValue.length > 50) {
                    // Rule: last field format validation is if it exceeds 50 character
                    firstErrorMessage = "Drug name cannot exceed 50 characters.";
                    fieldToHighlight = drugName;
                }

                if (fieldToHighlight === drugName) {
                    fieldToHighlight.classList.add('is-invalid');
                    displayError(firstErrorMessage);
                    fieldToHighlight.focus();
                    return false;
                }
            }


            // ------------------------------------------------------------------
            // D. REQUIRED/EMPTY VALIDATION (Priority 4: Check ALL empty fields)
            // ------------------------------------------------------------------
            const emptyFields = [];

            if (dosageValue === "") {
                emptyFields.push(dosage);
            }
            if (drugNameValue === "") {
                emptyFields.push(drugName);
            }
            if (patientValue === "") {
                emptyFields.push(patient);
            }

            if (emptyFields.length > 0) {
                // Rule: highlight it among the fields that is empty.
                emptyFields.forEach(field => field.classList.add('is-invalid'));

                firstErrorMessage = "All field/s are required.";
                displayError(firstErrorMessage);

                // Focus on the first field in the DOM order (Dosage, then Drug, then Patient)
                emptyFields[0].focus();
                return false;
            }

            // If we reach here, all client-side checks passed.
            return true;
        }

        document.getElementById('saveButton').addEventListener('click', async function (e) {
            e.preventDefault();
            if (!validateForm()) {
                return;
            }

            // All client-side validation passed. Proceed to Server-Side/Database validation.

            const patient = document.getElementById('Patient').value;
            const drugName = document.getElementById('DrugName').value;
            const dosage = document.getElementById('Dosage').value;
            try {
                const response = await fetch('@Url.Action("ValidatePatient", "Patient")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.getElementsByName('__RequestVerificationToken')[0].value
                    },
                    body: JSON.stringify({ patient, drugName, dosage })
                });
                const data = await response.json();
                if (!data.success) {
                    displayError(data.message);

                    // Clear client-side highlights before applying server-side ones
                    clearErrors();
                    let firstServerErrorField = null;

                    // Highlight fields based on server-side error type
                    if (data.errorType === 'alreadyExist') {
                        // All 3 fields are involved in the uniqueness check
                        document.getElementById('Dosage').classList.add('is-invalid');
                        document.getElementById('DrugName').classList.add('is-invalid');
                        document.getElementById('Patient').classList.add('is-invalid');
                        firstServerErrorField = document.getElementById('Dosage');
                        allrowexist = "Record already exists.";
                        displayError(allrowexist);

                    } else if (data.errorType === 'uniqueDrug') {
                        // Drug and Patient are involved
                        document.getElementById('DrugName').classList.add('is-invalid');
                        document.getElementById('Patient').classList.add('is-invalid');
                        firstServerErrorField = document.getElementById('DrugName');
                        uniquemessage = "Cannot add same drug to a patient.";

                        displayError(uniquemessage);

                    } else if (data.errorType === 'invalidDosage') {
                        document.getElementById('Dosage').classList.add('is-invalid');
                        firstServerErrorField = document.getElementById('Dosage');
                    }

                    if (firstServerErrorField) {
                        firstServerErrorField.focus();
                    }
                    return;
                }
                saveModal.show();
            } catch (error) {
                console.error('Validation failed:', error);
            }
        });

        document.getElementById('confirmSaveBtn').addEventListener('click', function () {
            document.getElementById('mainForm').submit();
        });

        document.getElementById('clearButton').addEventListener('click', function () {
            document.getElementById('Dosage').focus();
            document.getElementById('Patient').value = '';
            document.getElementById('DrugName').value = '';
            document.getElementById('Dosage').value = '';
            clearErrors();
        });
    });
    </script>
}