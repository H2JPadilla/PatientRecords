@model EL.PatientEntity
@{
    ViewBag.Title = "Update Patient";
}
@if (TempData["Message"] != null)
{
    <div class="alert alert-danger" id="server-message">
        @TempData["Message"]
    </div>
}
<h2 class="mt-3">Edit Record</h2>
@using (Html.BeginForm("UpdatePatient", "Patient", FormMethod.Post, new { id = "patientForm" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.ID)
    <div id="validation-summary" class="alert d-none"></div>
    @* Removed redundant <form> tag here as Html.BeginForm already creates one *@
    <div>
        <div class="mb-3 col-4">
            <label for="Dosage" class="form-label">Dosage<span style="color:red;">*</span></label>
            @Html.TextBoxFor(m => m.Dosage, new { @class = "form-control", type = "number", step = "any", id = "Dosage", title = "Enter the dosage intake", tabindex = "1" })
        </div>
        <div class="mb-3 col-4">
            <label for="DrugName" class="form-label">Drug<span style="color:red;">*</span></label>
            @Html.TextBoxFor(m => m.DrugName, new { @class = "form-control", id = "DrugName", title = "Enter the name of the drug/medicine", tabindex = "2" })
        </div>
        <div class="mb-3
                     col-4">
            <label for="Patient" class="form-label">Patient<span style="color:red;">*</span></label>
            @Html.TextBoxFor(m => m.Patient, new { @class = "form-control", id = "Patient", title = "Enter the name of the patient", tabindex = "3" })
        </div>
    </div>

    <div class="col-12 mt-3">
        <button type="button" id="updateButton" class="btn btn-outline-secondary" tabindex="4">Update</button>
        <button type="button" id="clearButton" class="btn btn-outline-secondary" tabindex="5">Clear All</button>
        <a href="@Url.Action("ViewPatient")" class="btn btn-outline-secondary" tabindex="6">Cancel</a>
    </div>
    @* Removed redundant </form> tag here *@
}
<div class="modal fade" id="updateModal" tabindex="-1" aria-labelledby="updateModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="updateModalLabel">Confirm Update</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Do you want to update
                this patient record?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmUpdateBtn">Yes, Update</button>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script src="~/Areas/Admin/Content/JavaScript/jquery-3.6.0.min.js"></script> 
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var updateModal = new bootstrap.Modal(document.getElementById('updateModal'));
            document.getElementById('Dosage').focus();

            // Fade out success or error messages after a few seconds
            const serverMessage = document.getElementById('server-message');
            if (serverMessage) {
                setTimeout(() => {
                    serverMessage.style.transition = 'opacity 0.5s ease-out';
                    serverMessage.style.opacity = '0';
                    setTimeout(() => serverMessage.remove(), 500);
                }, 5000); // 5 seconds
            }

            //======================================================================================================================

            // removes the error indication when the user starts typing.
            document.querySelectorAll('input').forEach(input => {
                input.addEventListener('input', function() {
                    this.classList.remove('is-invalid');
                    document.getElementById('validation-summary').classList.add('d-none');
                });
            });

            //======================================================================================================================

            // remove leading zeros from the Dosage field
            document.getElementById('Dosage').addEventListener('input', function() {
                let value = this.value;
                // Check if the value starts with '0' but is not just '0' itself or a decimal like '0.'
                if (value.startsWith('0') && value.length > 1 && value.charAt(1) !== '.') {
                    this.value = parseFloat(value);
                }
            });

            //======================================================================================================================

            //Remove error indication
            function clearErrors() {
                document.querySelectorAll('input').forEach(input => {
                    input.classList.remove('is-invalid');
                });
                const validationSummary = document.getElementById('validation-summary');
                validationSummary.innerHTML = '';
                validationSummary.classList.add('d-none');
                validationSummary.classList.remove('alert-danger');
                validationSummary.classList.remove('fade-out'); // Clear fade-out classes
                validationSummary.style.opacity = '1'; // Reset opacity
            }

            //======================================================================================================================

            //display error (Modified to match AddPatient's fade-out logic)
            function displayError(message) {
                const validationSummary = document.getElementById('validation-summary');
                validationSummary.innerHTML = message;
                validationSummary.classList.remove('d-none');
                validationSummary.classList.add('alert-danger');

                // Set timeout for fade-out
                setTimeout(() => {
                    validationSummary.style.transition = 'opacity 0.5s ease-out';
                    validationSummary.style.opacity = '0';
                    setTimeout(() => {
                        validationSummary.classList.add('d-none');
                        validationSummary.style.opacity = '1';
                    }, 500); // Wait for the transition to finish before hiding
                }, 5000); // Display for 5 seconds
            }

            //======================================================================================================================

            // Client-side validation function 
            function validateForm() {
                let firstErrorMessage = "";
                let fieldToHighlight = null;

                const patient = document.getElementById('Patient');
                const drugName = document.getElementById('DrugName');
                const dosage = document.getElementById('Dosage');

                const patientValue = patient.value.trim();
                const drugNameValue = drugName.value.trim();
                const dosageValue = dosage.value.trim();
                const parsedDosage = parseFloat(dosageValue);

                clearErrors(); // Clear all previous highlights and summary message

                // Re-assign trimmed values to fields
                patient.value = patientValue;
                drugName.value = drugNameValue;

                //======================================================================================================================

                //DOSAGE VALIDATION 

                if (dosageValue !== "") {
                    let dosageError = "";

                    if (isNaN(parsedDosage) || parsedDosage <= 0) {
                        dosageError = "Dosage must be a positive number.";
                    } else if (parsedDosage > 999.9999) {
                        dosageError = "Dosage cannot exceed 999.9999.";
                    } else {
                        const decimalPlaces = (dosageValue.split('.')[1] || '').length;
                        if (decimalPlaces > 4) {
                            dosageError = "Dosage can only have up to 4 decimal places.";
                        }
                    }

                    if (dosageError !== "") {
                        firstErrorMessage = dosageError;
                        fieldToHighlight = dosage;

                        fieldToHighlight.classList.add('is-invalid');
                        displayError(firstErrorMessage);
                        fieldToHighlight.focus();
                        return false;
                    }
                }

                //======================================================================================================================

                //PATIENT VALIDATION 
                if (patientValue !== "") {
                    // Patient name validation: Must contain only alpha, space, hyphen, apostrophe
                    const isAlphaAndAllowedChars = /^[a-zA-Z\s'-]+$/.test(patientValue);

                    // Rule: Patient format check
                    if (!isAlphaAndAllowedChars) {
                        firstErrorMessage = "Patient name must be alphanumeric with hyphens, apostrophes, spaces and max 50 characters.";
                        fieldToHighlight = patient;
                    } else if (patientValue.length > 50) {
                        firstErrorMessage = "Patient name cannot exceed 50 characters.";
                        fieldToHighlight = patient;
                    }

                    if (fieldToHighlight === patient) {
                        fieldToHighlight.classList.add('is-invalid');
                        displayError(firstErrorMessage);
                        fieldToHighlight.focus();
                        return false;
                    }
                }

                //======================================================================================================================

                // C. DRUG VALIDATION 

                if (drugNameValue !== "") {
                    // Rule: Drug format check (alphanumeric with space)
                    if (!/^[a-zA-Z0-9\s]+$/.test(drugNameValue)) {
                        firstErrorMessage = "Drug name must be alphanumeric with spaces and max 50 characters.";
                        fieldToHighlight = drugName;
                    } else if (drugNameValue.length > 50) {
                        firstErrorMessage = "Drug name cannot exceed 50 characters.";
                        fieldToHighlight = drugName;
                    }

                    if (fieldToHighlight === drugName) {
                        fieldToHighlight.classList.add('is-invalid');
                        displayError(firstErrorMessage);
                        fieldToHighlight.focus();
                        return false;
                    }
                }

                //======================================================================================================================

                // D. REQUIRED/EMPTY VALIDATION (Priority 4: Check ALL empty fields)

                const emptyFields = [];

                if (dosageValue === "") {
                    emptyFields.push(dosage);
                }
                if (drugNameValue === "") {
                    emptyFields.push(drugName);
                }
                if (patientValue === "") {
                    emptyFields.push(patient);
                }

                if (emptyFields.length > 0) {
                    // Highlight ALL empty fields
                    emptyFields.forEach(field => field.classList.add('is-invalid'));

                    firstErrorMessage = "All field/s are required.";
                    displayError(firstErrorMessage);

                    // Focus on the first field in the DOM order
                    emptyFields[0].focus();
                    return false;
                }

                // If we reach here, all client-side checks passed.
                return true;
            }

            //======================================================================================================================

            //UPDATE
            document.getElementById('updateButton').addEventListener('click', async function (e) {
                e.preventDefault();
                if (!validateForm()) {
                    return;
                }

                const patientId = document.getElementById('ID').value;
                const patient = document.getElementById('Patient').value;
                const drugName = document.getElementById('DrugName').value;
                const dosage = document.getElementById('Dosage').value;

                try {
                    const response = await fetch('@Url.Action("ValidatePatient", "Patient")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        //Send the ID for update validation on the server
                        body: JSON.stringify({ patient: patient, drugName: drugName, dosage: dosage, id: patientId })
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    const data = await response.json();

                    clearErrors();

                    const modalBody = document.getElementById('updateModal').querySelector('.modal-body');
                    let firstServerErrorField = null;

                    if (data.success) {
                        modalBody.textContent = "Do you want to update this patient record?";
                        updateModal.show();
                    } else {
                        // Handle server-side errors
                        displayError(data.message);

                        if (data.errorType === 'alreadyExist') {
                            // All 3 fields are involved in the uniqueness check
                            document.getElementById('Dosage').classList.add('is-invalid');
                            document.getElementById('DrugName').classList.add('is-invalid');
                            document.getElementById('Patient').classList.add('is-invalid');
                            firstServerErrorField = document.getElementById('Dosage');

                            displayError("Record already exists."); // Overwrite with the specific message

                        } else if (data.errorType === 'uniqueDrug') {
                            // Drug and Patient are involved
                            document.getElementById('DrugName').classList.add('is-invalid');
                            document.getElementById('Patient').classList.add('is-invalid');
                            firstServerErrorField = document.getElementById('DrugName');

                            displayError("Cannot add same drug to a patient."); // Overwrite with the specific message

                        } else if (data.errorType === 'invalidDosage') {
                            document.getElementById('Dosage').classList.add('is-invalid');
                            firstServerErrorField = document.getElementById('Dosage');
                        } else if (data.errorType === 'noChange') {
                             // Handle no change case separately to show the no-change modal message
                            modalBody.textContent = "No changes were made. Do you still want to update the record?";
                            updateModal.show();
                            return; // Don't focus a field on no-change
                        }

                        if (firstServerErrorField) {
                            firstServerErrorField.focus();
                        }
                    }
                } catch (error) {
                    console.error('Fetch error:', error);
                    displayError('An unexpected error occurred. Please try again.');
                }
            });

            //======================================================================================================================

            //CONFIRM

            document.getElementById('confirmUpdateBtn').addEventListener('click', function () {
                document.getElementById('patientForm').submit();
            });

            document.getElementById('clearButton').addEventListener('click', function () {
                document.getElementById('Dosage').value = '';
                document.getElementById('DrugName').value = '';
                document.getElementById('Patient').value = '';
                document.getElementById('Dosage').focus();

                clearErrors();
            });
        });
    </script>
}