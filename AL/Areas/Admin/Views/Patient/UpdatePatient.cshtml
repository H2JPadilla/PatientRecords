@model EL.PatientEntity
@{
    ViewBag.Title = "Update Patient";
}
@if (TempData["Message"] != null)
{
    <div class="alert alert-danger" id="server-message">
        @TempData["Message"]
    </div>
}
<h2 class="mt-3">Edit Record</h2>
@using (Html.BeginForm("UpdatePatient", "Patient", FormMethod.Post, new { id = "patientForm" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.ID)
    <div id="validation-summary" class="alert d-none"></div>
    <form>
        <div>
            <div class="mb-3 col-4">
                <label for="Dosage" class="form-label">Dosage<span style="color:red;">*</span></label>
                @Html.TextBoxFor(m => m.Dosage, new { @class = "form-control", type = "number", step = "any", id = "Dosage", title = "Enter the dosage intake", tabindex = "1" })
            </div>
            <div class="mb-3 col-4">
                <label for="DrugName" class="form-label">Drug<span style="color:red;">*</span></label>
                @Html.TextBoxFor(m => m.DrugName, new { @class = "form-control", id = "DrugName", title = "Enter the name of the drug/medicine", tabindex = "2" })
            </div>
            <div class="mb-3
                 col-4">
                <label for="Patient" class="form-label">Patient<span style="color:red;">*</span></label>
                @Html.TextBoxFor(m => m.Patient, new { @class = "form-control", id = "Patient", title = "Enter the name of the patient", tabindex = "3" })
            </div>
        </div>
        @* Display validation errors from the server and client *@
        <div class="col-12 mt-3">
            <button type="button" id="updateButton" class="btn btn-outline-secondary" tabindex="4">Update</button>
            <button type="button" id="clearButton" class="btn btn-outline-secondary" tabindex="5">Clear</button>
            <a href="@Url.Action("ViewPatient")" class="btn btn-outline-secondary" tabindex="6">Cancel</a>
        </div>
    </form>
}
<div class="modal fade" id="updateModal" tabindex="-1" aria-labelledby="updateModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="updateModalLabel">Confirm Update</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Do you want to update
                this patient record?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmUpdateBtn">Yes, Update</button>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var updateModal = new bootstrap.Modal(document.getElementById('updateModal'));
            document.getElementById('Dosage').focus();

            // Fade out success or error messages after a few seconds
            const serverMessage = document.getElementById('server-message');
            if (serverMessage) {
                setTimeout(() => {
                    serverMessage.style.transition = 'opacity 0.5s ease-out';
                    serverMessage.style.opacity = '0';
                    setTimeout(() => serverMessage.remove(), 500);
                }, 5000); // 5 seconds
            }

            // removes the error indication when the user starts typing.
            document.querySelectorAll('input').forEach(input => {
                input.addEventListener('input', function() {
                    this.classList.remove('is-invalid');
                    document.getElementById('validation-summary').classList.add('d-none');
                });
            });
            // remove leading zeros from the Dosage field
            document.getElementById('Dosage').addEventListener('input', function() {
                let value = this.value;
                // Check if the value starts with '0' but is not just '0' itself or a decimal like '0.'
                if (value.startsWith('0') && value.length > 1 && value.charAt(1) !== '.') {
                    this.value = parseFloat(value);
                }
            });

            function clearErrors() {
                document.querySelectorAll('input').forEach(input => {
                    input.classList.remove('is-invalid');
                });
                const validationSummary = document.getElementById('validation-summary');
                validationSummary.innerHTML = '';
                validationSummary.classList.add('d-none');
                validationSummary.classList.remove('alert-danger');
            }

            function displayError(message, errorField) {
                const validationSummary = document.getElementById('validation-summary');
                validationSummary.innerHTML = message;
                validationSummary.classList.remove('d-none');
                validationSummary.classList.add('alert-danger');
                if (errorField) {
                    const field = document.getElementById(errorField);
                    if (field) {
                        field.classList.add('is-invalid');
                    }
                }
            }

            // Client-side validation function
            function validateForm() {
                let isValid = true;
                const dosage = document.getElementById('Dosage').value.trim();
                const drugName = document.getElementById('DrugName').value.trim();
                const patient = document.getElementById('Patient').value.trim();

                clearErrors();

                if (!patient) {
                    displayError("All field/s are required.", "Patient");
                    isValid = false;
                }
                if (!drugName) {
                    displayError("All field/s are required.", "DrugName");
                    isValid = false;
                }
                if (!dosage) {
                    displayError("All field/s are required.", "Dosage");
                    isValid = false;
                }

                const parsedDosage = parseFloat(dosage);
                if (parsedDosage <= 0) {
                    displayError("Dosage must be a positive number.", "Dosage");
                    isValid = false;
                }
                // New validation for maximum value
                if (parsedDosage > 999.9999) {
                    displayError("Dosage cannot exceed 999.9999.", "Dosage");
                    isValid = false;
                }
                // New validation for up to 4 decimal places
                if (parsedDosage > 0 && !/^\d+(\.\d{1,4})?$/.test(dosage)) {
                    displayError("Dosage can have up to four decimal places.", "Dosage");
                    isValid = false;
                }

                return isValid;
            }

            document.getElementById('updateButton').addEventListener('click', function () {
                if (!validateForm()) {
                    return;
                }

                const patientId = document.getElementById('ID').value;
                const patient = document.getElementById('Patient').value;
                const drugName = document.getElementById('DrugName').value;
                const dosage = document.getElementById('Dosage').value;

                fetch('@Url.Action("ValidatePatient", "Patient")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ patient: patient, drugName: drugName, dosage: dosage, id: patientId })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    const modalBody = document.getElementById('updateModal').querySelector('.modal-body');
                    if (data.success) {
                        modalBody.textContent = "Are you sure you want to update this record?";
                        updateModal.show();
                    } else {
                        if (data.errorType === 'noChange') {
                            modalBody.textContent = "No changes were made. Do you still want to update the record?";
                            updateModal.show();
                        } else {
                            displayError(data.message);
                        }
                    }
                })
                .catch(error => {
                    console.error('Fetch error:', error);
                    displayError('An unexpected error occurred. Please try again.');
                });
            });

            document.getElementById('confirmUpdateBtn').addEventListener('click', function () {
                document.getElementById('patientForm').submit();
            });

            document.getElementById('clearButton').addEventListener('click', function () {
                document.getElementById('patientForm').reset();
                clearErrors();
            });
        });
    </script>
}