@model List<EL.PatientEntity>
@{
    ViewBag.Title = "Patient List";
}

<h2>Patient List</h2>
@if (TempData["Message"] != null)
{
    <div class="alert alert-success">
        @TempData["Message"]
    </div>
}

<form id="searchForm" class="mb-4">
    @* The __RequestVerificationToken is needed for the delete action *@
    @Html.AntiForgeryToken()
    <div class="row g-4">
        <div class="col-md-2">
            <label for="patientFilter" class="form-label">Patient</label>
            <input type="text" id="patientFilter" name="patient" class="form-control" value="@ViewBag.Patient" placeholder="Patient Name">
        </div>
        <div class="col-md-2">
            <label for="drugFilter" class="form-label">Drug Name</label>
            <input type="text" id="drugFilter" name="drug" class="form-control" value="@ViewBag.Drug" placeholder="Drug Name">
        </div>
        <div class="col-md-2">
            <label for="dosageFilter" class="form-label">Dosage</label>
            <input type="text" id="dosageFilter" name="dosage" class="form-control" value="@ViewBag.Dosage" placeholder="Dosage">
        </div>
        <div class="col-md-2">
            <label for="dateFilter" class="form-label">Modified Date</label>
            <input type="date" id="dateFilter" name="date" class="form-control" value="@ViewBag.Date">
        </div>
        <div class="col-md-1 d-flex align-items-end">
            <button type="button" id="resetButton" class="btn btn-secondary w-100">Reset</button>
        </div>
        <div class="col-md-3 d-flex align-items-end">
            <a href="@Url.Action("AddPatient", "Patient")" class="btn btn-sm btn-success">
                + Add Patient
            </a>
        </div>
    </div>
</form>

<table class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>ID</th>
            <th>Patient</th>
            <th>Drug Name</th>
            <th>Dosage</th>
            <th>Modified Date</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody id="patientTableBody">
        @* This loop renders the initial patient list when the page first loads *@
        @foreach (var patient in Model)
        {
            <tr>
                <td>@patient.ID</td>
                <td>@patient.Patient</td>
                <td>@patient.DrugName</td>
                <td>@patient.Dosage.ToString("F2")</td>
                <td>@patient.ModifiedDate.ToShortDateString()</td>
                <td>
                    <a href="@Url.Action("UpdatePatient", new { id = patient.ID })" class="btn btn-sm btn-primary">Edit</a>
                    <a href="#" class="btn btn-sm btn-danger delete-btn" data-id="@patient.ID" data-bs-toggle="modal" data-bs-target="#deleteModal">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

<div id="paginationContainer">
    <nav aria-label="Page navigation">
        <ul class="pagination">
            @for (int i = 1; i <= ViewBag.TotalPages; i++)
            {
                <li class="page-item @(i == ViewBag.Page ? "active" : "")">
                    <a class="page-link" href="@Url.Action("ViewPatient", new { patient = ViewBag.Patient, drug = ViewBag.Drug, dosage = ViewBag.Dosage, date = ViewBag.Date, page = i, pageSize = ViewBag.PageSize })">@i</a>
                </li>
            }
        </ul>
    </nav>
</div>

<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this record?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Yes, Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            let timeout = null;
            const searchInputs = document.querySelectorAll('#searchForm input');
            const form = document.getElementById('searchForm');
            const tableBody = document.getElementById('patientTableBody');
            const paginationContainer = document.getElementById('paginationContainer');
            const resetButton = document.getElementById('resetButton');

            // Store the ID of the record to be deleted
            let patientIdToDelete = null;

            // Get the modal and its button
            const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
            const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');

            // 1. Event listener for the delete button using event delegation
            tableBody.addEventListener('click', function(e) {
                if (e.target.classList.contains('delete-btn')) {
                    e.preventDefault();

                    // Store the ID from the clicked button
                    patientIdToDelete = e.target.getAttribute('data-id');

                    // Show the modal
                    deleteModal.show();
                }
            });

            // 2. Event listener for the modal's confirm button
            confirmDeleteBtn.addEventListener('click', function() {
                if (patientIdToDelete) {
                    // Create a temporary form to submit the POST request
                    const tempForm = document.createElement('form');
                    tempForm.action = `@Url.Action("DeletePatient", "Patient")`;
                    tempForm.method = 'POST';

                    // Add the hidden input for the ID
                    const idInput = document.createElement('input');
                    idInput.type = 'hidden';
                    idInput.name = 'id';
                    idInput.value = patientIdToDelete;
                    tempForm.appendChild(idInput);

                    // Add the Anti-forgery token from the main form on the page
                    const token = document.querySelector('input[name="__RequestVerificationToken"]');
                    if (token) {
                        const clonedToken = token.cloneNode(true);
                        tempForm.appendChild(clonedToken);
                    }

                    // Append and submit the form
                    document.body.appendChild(tempForm);
                    tempForm.submit();
                }
            });

            // Listen for keyup on all text/number inputs for live search
            searchInputs.forEach(input => {
                input.addEventListener('keyup', function () {
                    clearTimeout(timeout);
                    timeout = setTimeout(function () {
                        searchPatients();
                    }, 500);
                });
            });

            // Listen for 'change' on the date input
            document.getElementById('dateFilter').addEventListener('change', function () {
                searchPatients();
            });

            // Prevent form submission on Enter key
            form.addEventListener('keypress', function (e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    searchPatients();
                }
            });

            // Reset button functionality
            resetButton.addEventListener('click', function () {
                searchInputs.forEach(input => {
                    input.value = '';
                });
                searchPatients();
            });

            // The main AJAX function for searching
            function searchPatients(page = 1) {
                const patient = document.getElementById('patientFilter').value;
                const drug = document.getElementById('drugFilter').value;
                const dosage = document.getElementById('dosageFilter').value;
                const date = document.getElementById('dateFilter').value;

                const queryString = new URLSearchParams({
                    patient: patient,
                    drug: drug,
                    dosage: dosage,
                    date: date,
                    page: page
                }).toString();

                fetch(`@Url.Action("SearchPatients")?${queryString}`, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json'
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    updateTable(data.patients);
                    updatePagination(data.totalPages, data.page);

                    // Keep the date input field value after the search
                    document.getElementById('dateFilter').value = date;
                })
                .catch(error => {
                    console.error('There was a problem with the fetch operation:', error);
                });
            }

            // Update the table with new data from the AJAX response
            function updateTable(patients) {
                tableBody.innerHTML = '';
                if (patients.length === 0) {
                    tableBody.innerHTML = '<tr><td colspan="6" class="text-center text-muted">No records found</td></tr>';
                    return;
                }

                patients.forEach(patient => {
                    const row = document.createElement('tr');
                    const modifiedDate = patient.ModifiedDate;
                    row.innerHTML = `
                        <td>${patient.ID}</td>
                        <td>${patient.Patient}</td>
                        <td>${patient.DrugName}</td>
                        <td>${patient.Dosage.toFixed(2)}</td>
                        <td>${modifiedDate}</td>
                        <td>
                            <a href="/Admin/Patient/UpdatePatient/${patient.ID}" class="btn btn-sm btn-primary">Edit</a>
                            <a href="#" class="btn btn-sm btn-danger delete-btn" data-id="${patient.ID}" data-bs-toggle="modal" data-bs-target="#deleteModal">Delete</a>
                        </td>
                    `;
                    tableBody.appendChild(row);
                });
            }

            // Update the pagination links with new data
            function updatePagination(totalPages, currentPage) {
                const ul = document.createElement('ul');
                ul.className = 'pagination';

                for (let i = 1; i <= totalPages; i++) {
                    const li = document.createElement('li');
                    li.className = `page-item ${i === currentPage ? 'active' : ''}`;
                    const link = document.createElement('a');
                    link.className = 'page-link';
                    link.textContent = i;
                    link.href = '#';
                    link.addEventListener('click', (e) => {
                        e.preventDefault();
                        searchPatients(i);
                    });
                    li.appendChild(link);
                    ul.appendChild(li);
                }

                paginationContainer.innerHTML = '';
                paginationContainer.appendChild(ul);
            }
        });
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // ... (your existing code for search, delete modal, etc.) ...

            // Code to make the success alert disappear
            const successAlert = document.querySelector('.alert.alert-success');
            if (successAlert) {
                setTimeout(() => {
                    // Use a fade-out animation for a smoother effect
                    successAlert.style.transition = 'opacity 0.5s ease-out';
                    successAlert.style.opacity = '0';

                    // Remove the element from the DOM after the transition
                    setTimeout(() => successAlert.remove(), 500);
                }, 3000); // 3000 milliseconds = 3 seconds
            }
        });
    </script>
}