@model List<EL.PatientEntity>
@{
    ViewBag.Title = "Patient List";
    int counter = (ViewBag.Page - 1) * ViewBag.PageSize + 1;
}
@Html.AntiForgeryToken()

<style>
    h2 {
        font-size: 30px;
    }

    .btn-outline-secondary {
        color: dodgerblue;
        border: 0;
    }

    .filter-group .col-md-1,
    .filter-group .col-md-2,
    .filter-group .col-md-3,
    .filter-group .col-md-4 {
        display: flex;
        align-items: center;
    }

    .filter-group .btn {
        height: calc(2.25rem + 2px);
    }
</style>

<h2>PatientDetails</h2>

@if (TempData["Message"] != null)
{
    // The TempData value can be an object, so cast it to a string.
    string alertType = TempData["AlertType"] as string ?? "success";
    string alertClass = "alert-" + alertType;
    <div class="alert @alertClass alert-dismissible fade show" role="alert">
        @TempData["Message"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="mb-1">
    <a href="@Url.Action("AddPatient", "Patient")" class="btn btn-outline-secondary">
        Create New Records
    </a>
</div>

<div class="row mb-1 filter-group align-items-center border-top border-bottom py-2">
    <div class="col-md-2">
        <label for="dateFilter" style="color: dodgerblue; margin-left:10px;">Search by</label>
    </div>
    <div class="col-md-2">
        <input type="date" id="dateFilter" name="date" class="form-control" value="@ViewBag.Date">
    </div>
    <div class="col-md-2">
        <input type="number" id="dosageFilter" name="dosage" class="form-control" value="@ViewBag.Dosage">
    </div>
    <div class="col-md-2">
        <input type="text" id="drugFilter" name="drug" class="form-control" value="@ViewBag.Drug">
    </div>
    <div class="col-md-3">
        <input type="text" id="patientFilter" name="patient" class="form-control" value="@ViewBag.Patient">
    </div>
    <div class="col-md-1" id="resetButtonContainer">
        <button type="button" class="btn btn-secondary w-100" id="resetFilters">Reset</button>
    </div>
</div>

<table class="table table-hover">
    <thead>
        <tr>
            <th class="col-md-2">Actions</th>
            <th class="col-md-2">Date</th>
            <th class="col-md-2">Dosage</th>
            <th class="col-md-2">Drug Name</th>
            <th class="col-md-3">Patient</th>
            <th class="col-md-1"></th>
        </tr>
    </thead>
    <tbody id="patientTableBody">
        @foreach (var patient in Model)
        {
            <tr>
                <td class="col-md-2">
                    <a href="@Url.Action("UpdatePatient", new { id = patient.ID })" class="btn btn-sm btn-outline-secondary">Edit</a> |
                    <a href="#" class="btn btn-sm btn-outline-secondary delete-btn" data-id="@patient.ID" data-bs-toggle="modal" data-bs-target="#deleteModal">Delete</a>
                </td>
                <td class="col-md-2">@patient.ModifiedDate.ToShortDateString()</td>
                <td class="col-md-2">@patient.Dosage.ToString("F2")</td>
                <td class="col-md-2">@patient.DrugName</td>
                <td class="col-md-3">@patient.Patient</td>
                <td class="col-md-1" hidden>@patient.ID</td>
            </tr>
        }
    </tbody>
</table>

<div id="paginationContainer">
    @* The pagination will be dynamically generated by JavaScript *@
</div>

<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this record?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Yes, Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            let timeout = null;
            let currentPage = @ViewBag.Page; // Store the current page
            const tableBody = document.getElementById('patientTableBody');
            const paginationContainer = document.getElementById('paginationContainer');
            const searchInputs = document.querySelectorAll('#dateFilter, #drugFilter, #dosageFilter, #patientFilter');
            const resetButtonContainer = document.getElementById('resetButtonContainer');

            // Store the ID of the record to be deleted
            let patientIdToDelete = null;

            // Get the modal and its button
            const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
            const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');

            // Function to check if any search input has a value
            function hasFilterValue() {
                return Array.from(searchInputs).some(input => input.value.trim() !== '');
            }

            // Function to update the visibility of the Reset button
            function updateResetButtonVisibility() {
                if (hasFilterValue()) {
                    resetButtonContainer.classList.remove('d-none');
                } else {
                    resetButtonContainer.classList.add('d-none');
                }
            }

            // Initially hide the reset button container if no filter values are present
            // This is crucial for when the page loads with no pre-filled filter values.
            updateResetButtonVisibility();

            // 1. Event listener for the delete button using event delegation
            tableBody.addEventListener('click', function (e) {
                if (e.target.classList.contains('delete-btn')) {
                    e.preventDefault();

                    // Store the ID from the clicked button
                    patientIdToDelete = e.target.getAttribute('data-id');

                    // Show the modal
                    deleteModal.show();
                }
            });

            // 2. Event listener for the modal's confirm button
            confirmDeleteBtn.addEventListener('click', function () {
                if (patientIdToDelete) {
                    // Create a temporary form to submit the POST request
                    const tempForm = document.createElement('form');
                    tempForm.action = `@Url.Action("DeletePatient", "Patient")`;
                    tempForm.method = 'POST';

                    // Add the hidden input for the ID
                    const idInput = document.createElement('input');
                    idInput.type = 'hidden';
                    idInput.name = 'id';
                    idInput.value = patientIdToDelete;
                    tempForm.appendChild(idInput);

                    // Add the Anti-forgery token from the main form on the page
                    const token = document.querySelector('input[name="__RequestVerificationToken"]');
                    if (token) {
                        const clonedToken = token.cloneNode(true);
                        tempForm.appendChild(clonedToken);
                    }

                    // Append and submit the form
                    document.body.appendChild(tempForm);
                    tempForm.submit();
                }
            });

            // Re-useable search function with page number
            function searchPatients(page = 1) {
                const patient = document.getElementById('patientFilter').value.trim();
                const drug = document.getElementById('drugFilter').value.trim();
                const dosage = document.getElementById('dosageFilter').value;
                const date = document.getElementById('dateFilter').value;

                const queryString = new URLSearchParams({
                    patient: patient,
                    drug: drug,
                    dosage: dosage,
                    date: date,
                    page: page
                }).toString();

                fetch(`@Url.Action("SearchPatients")?${queryString}`, {
                    method: 'GET',
                    headers: { 'Accept': 'application/json' }
                })
                    .then(response => {
                        if (!response.ok) throw new Error('Network response was not ok');
                        return response.json();
                    })
                    .then(data => {
                        updateTable(data.patients);
                        updatePagination(data.totalPages, data.page);
                        currentPage = data.page; // Update the currentPage variable
                    })
                    .catch(error => console.error('Fetch error:', error));
            }

            // Update table rows
            function updateTable(patients) {
                tableBody.innerHTML = '';
                if (patients.length === 0) {
                    tableBody.innerHTML = '<tr><td colspan="5" class="text-center text-muted">No records found</td></tr>';
                    return;
                }

                patients.forEach(patient => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td class="col-md-2">
                            <a href="/Admin/Patient/UpdatePatient/${patient.ID}" class="btn btn-sm btn-outline-secondary">Edit</a> |
                            <a href="#" class="btn btn-sm btn-outline-secondary delete-btn" data-id="${patient.ID}" data-bs-toggle="modal" data-bs-target="#deleteModal">Delete</a>
                        </td>
                        <td class="col-md-2">${new Date(patient.ModifiedDate).toLocaleDateString()}</td>
                        <td class="col-md-2">${parseFloat(patient.Dosage).toFixed(2)}</td>
                        <td class="col-md-2">${patient.DrugName}</td>
                        <td class="col-md-3">${patient.Patient}</td>
                        <td class="col-md-1"></td>
                    `;
                    tableBody.appendChild(row);
                });
            }

            // Update pagination links dynamically with Bootstrap styling and event listeners
            function updatePagination(totalPages, currentPage) {
                const nav = document.createElement('nav');
                nav.setAttribute('aria-label', 'Page navigation');
                const paginationUl = document.createElement('ul');
                paginationUl.className = 'pagination';

                // Previous button
                const prevLi = document.createElement('li');
                prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
                const prevLink = document.createElement('a');
                prevLink.className = 'page-link';
                prevLink.href = '#';
                prevLink.textContent = 'Previous';
                prevLink.addEventListener('click', (e) => {
                    e.preventDefault();
                    if (currentPage > 1) {
                        searchPatients(currentPage - 1);
                    }
                });
                prevLi.appendChild(prevLink);
                paginationUl.appendChild(prevLi);

                // Page number links
                for (let i = 1; i <= totalPages; i++) {
                    const li = document.createElement('li');
                    li.className = `page-item ${i === currentPage ? 'active' : ''}`;
                    const link = document.createElement('a');
                    link.className = 'page-link';
                    link.href = '#';
                    link.textContent = i;
                    link.addEventListener('click', (e) => {
                        e.preventDefault();
                        searchPatients(i);
                    });
                    li.appendChild(link);
                    paginationUl.appendChild(li);
                }

                // Next button
                const nextLi = document.createElement('li');
                nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
                const nextLink = document.createElement('a');
                nextLink.className = 'page-link';
                nextLink.href = '#';
                nextLink.textContent = 'Next';
                nextLink.addEventListener('click', (e) => {
                    e.preventDefault();
                    if (currentPage < totalPages) {
                        searchPatients(currentPage + 1);
                    }
                });
                nextLi.appendChild(nextLink);
                paginationUl.appendChild(nextLi);

                // Clear and append
                paginationContainer.innerHTML = '';
                nav.appendChild(paginationUl);
                paginationContainer.appendChild(nav);
            }

            // Initialize event listeners for search inputs and update button visibility
            searchInputs.forEach(input => {
                input.addEventListener('input', function () {
                    updateResetButtonVisibility();
                    clearTimeout(timeout);
                    timeout = setTimeout(function () {
                        searchPatients(); // Start search from page 1
                    }, 500);
                });
            });

            // Reset button functionality
            document.getElementById('resetFilters').addEventListener('click', function () {
                document.getElementById('dateFilter').value = '';
                document.getElementById('dosageFilter').value = '';
                document.getElementById('drugFilter').value = '';
                document.getElementById('patientFilter').value = '';
                updateResetButtonVisibility();
                searchPatients(); // Reload the list
            });

            // --- Consolidated Alert Dismissal Logic ---
            const alerts = document.querySelectorAll('.alert'); // Select all elements with the 'alert' class
            alerts.forEach(alert => {
                setTimeout(() => {
                    // Apply fade out effect
                    alert.style.transition = 'opacity 0.5s ease-out';
                    alert.style.opacity = '0';
                    // Remove the element from the DOM after the fade out
                    setTimeout(() => alert.remove(), 500);
                }, 3000);
            });
            // --- End of Consolidated Alert Dismissal Logic ---

            // Initial call to generate pagination on page load
            searchPatients(currentPage);
        });
    </script>
}